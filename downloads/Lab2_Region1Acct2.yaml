AWSTemplateFormatVersion: '2010-09-09'
Description: The template creates the VPC and transit gateway for the networking master account, second
  region, so that you can test transit gateway peering.


Parameters:

  KeyPairName:
    Description: Pre-existing SSH Keypair name used to access EC2 instances by default
    Type: String
    Default: 'KeyPair2'
    AllowedPattern: .+

  PrivateVPC2Name:
    Description: Default name for the first private VPC
    Type: String
    Default: 'PrivateVPC2'

  PrivateVPC2InstanceIP:
    Description: Default private IP address for NAT instance
    Type: String
    Default: '10.1.1.100'

Mappings: 
  InstanceMap: 
    us-east-1: 
      NAT: 'ami-00a9d4a05375b2763'
      AL2: 'ami-00068cd7555f543d5'
    eu-west-1: 
      NAT: 'ami-0236d0cbbbe64730c'
      AL2: 'ami-01f14919ba412de34'


Resources:

#Create SSM role

  SSMInstanceRole2:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service: [ec2.amazonaws.com]
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

  SSMInstanceProfile2:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles: 
        - !Ref SSMInstanceRole2


#PrivateVPC2 vpc and subnet creation

  PrivateVPC2:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsHostnames: Yes
      Tags:
        - Key: Name
          Value: !Ref PrivateVPC2Name

  PrivateVPC2Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref PrivateVPC2
      CidrBlock: 10.1.1.0/24
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs: ""
      Tags:
        - Key: Name
          Value: !Join ['-', [PrivateVPC2Subnet, !Ref PrivateVPC2Name]]

# SSM endpoints creation

  PrivateVPC2SSMEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: Yes
      SecurityGroupIds:
        - !GetAtt PrivateVPC2.DefaultSecurityGroup
      ServiceName: !Join ['.', ['com.amazonaws',!Ref 'AWS::Region','ssm']]
      SubnetIds:
        - !Ref PrivateVPC2Subnet1
      VpcEndpointType: Interface
      VpcId: !Ref PrivateVPC2

  PrivateVPC2SSMMSGEndPoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: Yes
      SecurityGroupIds:
        - !GetAtt PrivateVPC2.DefaultSecurityGroup
      ServiceName: !Join ['.', ['com.amazonaws',!Ref 'AWS::Region','ssmmessages']]
      SubnetIds:
        - !Ref PrivateVPC2Subnet1
      VpcEndpointType: Interface
      VpcId: !Ref PrivateVPC2

  PrivateVPC2RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref PrivateVPC2
      Tags:
        - Key: Name
          Value: !Join ['-', [PrivateVPC2RT, !Ref PrivateVPC2Name]]

  PrivateVPC2SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateVPC2Subnet1
      RouteTableId: !Ref PrivateVPC2RouteTable

# security group for http, https and ICMP

  PrivateVPC2WebPingSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: SG to allow http, https and ping
      VpcId: !Ref 'PrivateVPC2'
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: 10.0.0.0/8
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          CidrIp: 192.168.0.0/16
          FromPort: '80'
          ToPort: '80'
        - IpProtocol: tcp
          CidrIp: 10.0.0.0/8
          FromPort: '443'
          ToPort: '443'
        - IpProtocol: tcp
          CidrIp: 192.168.0.0/16
          FromPort: '443'
          ToPort: '443'
        - IpProtocol: icmp
          CidrIp: 10.0.0.0/8
          FromPort: '-1'
          ToPort: '-1'
        - IpProtocol: icmp
          CidrIp: 192.168.0.0/16
          FromPort: '-1'
          ToPort: '-1'
      Tags:
        - Key: Name
          Value: !Join ['-', [!Ref PrivateVPC2Name, WebPingSG]]

# PrivateVPC2 subnet test instance creation

  PrivateVPC2SubnetTestInstance:
    Type: AWS::EC2::Instance
    DependsOn:
      - PrivateVPC2SSMEndPoint
      - PrivateVPC2SSMMSGEndPoint
    Properties:
      ImageId: !FindInMap
        - InstanceMap
        - !Ref AWS::Region
        - AL2
      InstanceType: t2.micro
      Tags:
        - Key: Name
          Value: PrivateVPC2Subnet-TestInstance
      BlockDeviceMappings:
        - DeviceName: "/dev/xvda"
          Ebs:
            VolumeSize: '8'
            VolumeType: gp2
      NetworkInterfaces:
      - AssociatePublicIpAddress: No
        DeleteOnTermination: Yes
        Description: Primary network interface
        DeviceIndex: 0
        PrivateIpAddress: !Ref PrivateVPC2InstanceIP
        SubnetId: !Ref PrivateVPC2Subnet1
        GroupSet:
          - !Ref PrivateVPC2WebPingSecurityGroup
          - !GetAtt PrivateVPC2.DefaultSecurityGroup
      IamInstanceProfile: !Ref SSMInstanceProfile2
      KeyName: !Ref KeyPairName





Outputs:
  StackName:
    Value: !Ref AWS::StackName
    Export: 
      Name: !Join ['-', [!Ref 'AWS::StackName', PrimaryStack]]
  VPC2Name:
    Value: !Ref PrivateVPC2
    Export: 
      Name: !Join ['-', [!Ref 'AWS::StackName', VPC2]]
  VPC2SubnetName:
    Value: !Ref PrivateVPC2Subnet1
    Export: 
      Name: !Join ['-', [!Ref 'AWS::StackName', VPC2Subnet]]
  VPC2RTName:
    Value: !Ref PrivateVPC2RouteTable
    Export: 
      Name: !Join ['-', [!Ref 'AWS::StackName', VPC2RouteTable]]
  
